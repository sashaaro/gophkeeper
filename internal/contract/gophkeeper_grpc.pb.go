// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v3.12.4
// source: internal/contract/gophkeeper.proto

package contract

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	Auth_Auth_FullMethodName     = "/gophkeeper.Auth/Auth"
	Auth_Register_FullMethodName = "/gophkeeper.Auth/Register"
)

// AuthClient is the client API for Auth service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuthClient interface {
	Auth(ctx context.Context, in *Credentials, opts ...grpc.CallOption) (*Empty, error)
	Register(ctx context.Context, in *Credentials, opts ...grpc.CallOption) (*Empty, error)
}

type authClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthClient(cc grpc.ClientConnInterface) AuthClient {
	return &authClient{cc}
}

func (c *authClient) Auth(ctx context.Context, in *Credentials, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, Auth_Auth_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) Register(ctx context.Context, in *Credentials, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, Auth_Register_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthServer is the server API for Auth service.
// All implementations must embed UnimplementedAuthServer
// for forward compatibility
type AuthServer interface {
	Auth(context.Context, *Credentials) (*Empty, error)
	Register(context.Context, *Credentials) (*Empty, error)
	mustEmbedUnimplementedAuthServer()
}

// UnimplementedAuthServer must be embedded to have forward compatible implementations.
type UnimplementedAuthServer struct {
}

func (UnimplementedAuthServer) Auth(context.Context, *Credentials) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Auth not implemented")
}
func (UnimplementedAuthServer) Register(context.Context, *Credentials) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedAuthServer) mustEmbedUnimplementedAuthServer() {}

// UnsafeAuthServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthServer will
// result in compilation errors.
type UnsafeAuthServer interface {
	mustEmbedUnimplementedAuthServer()
}

func RegisterAuthServer(s grpc.ServiceRegistrar, srv AuthServer) {
	s.RegisterService(&Auth_ServiceDesc, srv)
}

func _Auth_Auth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Credentials)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).Auth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Auth_Auth_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).Auth(ctx, req.(*Credentials))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Credentials)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Auth_Register_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).Register(ctx, req.(*Credentials))
	}
	return interceptor(ctx, in, info, handler)
}

// Auth_ServiceDesc is the grpc.ServiceDesc for Auth service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Auth_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gophkeeper.Auth",
	HandlerType: (*AuthServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Auth",
			Handler:    _Auth_Auth_Handler,
		},
		{
			MethodName: "Register",
			Handler:    _Auth_Register_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "internal/contract/gophkeeper.proto",
}

const (
	Vault_GetAll_FullMethodName            = "/gophkeeper.Vault/GetAll"
	Vault_CreateCredentials_FullMethodName = "/gophkeeper.Vault/CreateCredentials"
	Vault_CreateCreditCard_FullMethodName  = "/gophkeeper.Vault/CreateCreditCard"
	Vault_CreateText_FullMethodName        = "/gophkeeper.Vault/CreateText"
	Vault_CreateBinary_FullMethodName      = "/gophkeeper.Vault/CreateBinary"
	Vault_SendData_FullMethodName          = "/gophkeeper.Vault/SendData"
	Vault_ReceiveData_FullMethodName       = "/gophkeeper.Vault/ReceiveData"
)

// VaultClient is the client API for Vault service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VaultClient interface {
	// Получить все свои секреты
	GetAll(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*EntityList, error)
	CreateCredentials(ctx context.Context, in *CreateCreadentialsReq, opts ...grpc.CallOption) (*Entity, error)
	CreateCreditCard(ctx context.Context, in *CreateCreditCardReq, opts ...grpc.CallOption) (*Entity, error)
	CreateText(ctx context.Context, in *CreateTextReq, opts ...grpc.CallOption) (*Entity, error)
	CreateBinary(ctx context.Context, in *CreateBinaryReq, opts ...grpc.CallOption) (*Entity, error)
	SendData(ctx context.Context, opts ...grpc.CallOption) (Vault_SendDataClient, error)
	ReceiveData(ctx context.Context, in *Entity, opts ...grpc.CallOption) (Vault_ReceiveDataClient, error)
}

type vaultClient struct {
	cc grpc.ClientConnInterface
}

func NewVaultClient(cc grpc.ClientConnInterface) VaultClient {
	return &vaultClient{cc}
}

func (c *vaultClient) GetAll(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*EntityList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EntityList)
	err := c.cc.Invoke(ctx, Vault_GetAll_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vaultClient) CreateCredentials(ctx context.Context, in *CreateCreadentialsReq, opts ...grpc.CallOption) (*Entity, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Entity)
	err := c.cc.Invoke(ctx, Vault_CreateCredentials_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vaultClient) CreateCreditCard(ctx context.Context, in *CreateCreditCardReq, opts ...grpc.CallOption) (*Entity, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Entity)
	err := c.cc.Invoke(ctx, Vault_CreateCreditCard_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vaultClient) CreateText(ctx context.Context, in *CreateTextReq, opts ...grpc.CallOption) (*Entity, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Entity)
	err := c.cc.Invoke(ctx, Vault_CreateText_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vaultClient) CreateBinary(ctx context.Context, in *CreateBinaryReq, opts ...grpc.CallOption) (*Entity, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Entity)
	err := c.cc.Invoke(ctx, Vault_CreateBinary_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vaultClient) SendData(ctx context.Context, opts ...grpc.CallOption) (Vault_SendDataClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Vault_ServiceDesc.Streams[0], Vault_SendData_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &vaultSendDataClient{ClientStream: stream}
	return x, nil
}

type Vault_SendDataClient interface {
	Send(*Chunk) error
	CloseAndRecv() (*Empty, error)
	grpc.ClientStream
}

type vaultSendDataClient struct {
	grpc.ClientStream
}

func (x *vaultSendDataClient) Send(m *Chunk) error {
	return x.ClientStream.SendMsg(m)
}

func (x *vaultSendDataClient) CloseAndRecv() (*Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *vaultClient) ReceiveData(ctx context.Context, in *Entity, opts ...grpc.CallOption) (Vault_ReceiveDataClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Vault_ServiceDesc.Streams[1], Vault_ReceiveData_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &vaultReceiveDataClient{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Vault_ReceiveDataClient interface {
	Recv() (*Chunk, error)
	grpc.ClientStream
}

type vaultReceiveDataClient struct {
	grpc.ClientStream
}

func (x *vaultReceiveDataClient) Recv() (*Chunk, error) {
	m := new(Chunk)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// VaultServer is the server API for Vault service.
// All implementations must embed UnimplementedVaultServer
// for forward compatibility
type VaultServer interface {
	// Получить все свои секреты
	GetAll(context.Context, *Empty) (*EntityList, error)
	CreateCredentials(context.Context, *CreateCreadentialsReq) (*Entity, error)
	CreateCreditCard(context.Context, *CreateCreditCardReq) (*Entity, error)
	CreateText(context.Context, *CreateTextReq) (*Entity, error)
	CreateBinary(context.Context, *CreateBinaryReq) (*Entity, error)
	SendData(Vault_SendDataServer) error
	ReceiveData(*Entity, Vault_ReceiveDataServer) error
	mustEmbedUnimplementedVaultServer()
}

// UnimplementedVaultServer must be embedded to have forward compatible implementations.
type UnimplementedVaultServer struct {
}

func (UnimplementedVaultServer) GetAll(context.Context, *Empty) (*EntityList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}
func (UnimplementedVaultServer) CreateCredentials(context.Context, *CreateCreadentialsReq) (*Entity, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCredentials not implemented")
}
func (UnimplementedVaultServer) CreateCreditCard(context.Context, *CreateCreditCardReq) (*Entity, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCreditCard not implemented")
}
func (UnimplementedVaultServer) CreateText(context.Context, *CreateTextReq) (*Entity, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateText not implemented")
}
func (UnimplementedVaultServer) CreateBinary(context.Context, *CreateBinaryReq) (*Entity, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBinary not implemented")
}
func (UnimplementedVaultServer) SendData(Vault_SendDataServer) error {
	return status.Errorf(codes.Unimplemented, "method SendData not implemented")
}
func (UnimplementedVaultServer) ReceiveData(*Entity, Vault_ReceiveDataServer) error {
	return status.Errorf(codes.Unimplemented, "method ReceiveData not implemented")
}
func (UnimplementedVaultServer) mustEmbedUnimplementedVaultServer() {}

// UnsafeVaultServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VaultServer will
// result in compilation errors.
type UnsafeVaultServer interface {
	mustEmbedUnimplementedVaultServer()
}

func RegisterVaultServer(s grpc.ServiceRegistrar, srv VaultServer) {
	s.RegisterService(&Vault_ServiceDesc, srv)
}

func _Vault_GetAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VaultServer).GetAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Vault_GetAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VaultServer).GetAll(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Vault_CreateCredentials_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCreadentialsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VaultServer).CreateCredentials(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Vault_CreateCredentials_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VaultServer).CreateCredentials(ctx, req.(*CreateCreadentialsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Vault_CreateCreditCard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCreditCardReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VaultServer).CreateCreditCard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Vault_CreateCreditCard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VaultServer).CreateCreditCard(ctx, req.(*CreateCreditCardReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Vault_CreateText_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTextReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VaultServer).CreateText(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Vault_CreateText_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VaultServer).CreateText(ctx, req.(*CreateTextReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Vault_CreateBinary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBinaryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VaultServer).CreateBinary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Vault_CreateBinary_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VaultServer).CreateBinary(ctx, req.(*CreateBinaryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Vault_SendData_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(VaultServer).SendData(&vaultSendDataServer{ServerStream: stream})
}

type Vault_SendDataServer interface {
	SendAndClose(*Empty) error
	Recv() (*Chunk, error)
	grpc.ServerStream
}

type vaultSendDataServer struct {
	grpc.ServerStream
}

func (x *vaultSendDataServer) SendAndClose(m *Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *vaultSendDataServer) Recv() (*Chunk, error) {
	m := new(Chunk)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Vault_ReceiveData_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Entity)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(VaultServer).ReceiveData(m, &vaultReceiveDataServer{ServerStream: stream})
}

type Vault_ReceiveDataServer interface {
	Send(*Chunk) error
	grpc.ServerStream
}

type vaultReceiveDataServer struct {
	grpc.ServerStream
}

func (x *vaultReceiveDataServer) Send(m *Chunk) error {
	return x.ServerStream.SendMsg(m)
}

// Vault_ServiceDesc is the grpc.ServiceDesc for Vault service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Vault_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gophkeeper.Vault",
	HandlerType: (*VaultServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAll",
			Handler:    _Vault_GetAll_Handler,
		},
		{
			MethodName: "CreateCredentials",
			Handler:    _Vault_CreateCredentials_Handler,
		},
		{
			MethodName: "CreateCreditCard",
			Handler:    _Vault_CreateCreditCard_Handler,
		},
		{
			MethodName: "CreateText",
			Handler:    _Vault_CreateText_Handler,
		},
		{
			MethodName: "CreateBinary",
			Handler:    _Vault_CreateBinary_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SendData",
			Handler:       _Vault_SendData_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "ReceiveData",
			Handler:       _Vault_ReceiveData_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "internal/contract/gophkeeper.proto",
}
