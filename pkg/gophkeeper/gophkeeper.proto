syntax = "proto3";
package gophkeeper.v1;

option go_package = "keeper/gophkeeper";

message Empty {}

message Credentials {
  string login = 1;
  string password = 2;
}

enum Kind {
  KIND_UNSPECIFIED = 0;
  KIND_CREDENTIALS = 1;
  KIND_TEXT = 2;
  KIND_BINARY = 3;
  KIND_CREDIT_CARD = 4;
}

message Metadata {
  repeated Tag tags = 2;
}

message Tag {
  string name = 1;
  string value = 2;
}

message CreateCreadentialsReq {
  Metadata meta = 1;
  EntityCredentials data = 2;
}

message CreateCreditCardReq {
  Metadata meta = 1;
  EntityCreditCard data = 2;
}

message CreateBinaryReq {
  Metadata meta = 1;
  uint64 length = 2;
}

message CreateTextReq {
  Metadata meta = 1;
  uint64 length = 2;
}

message EntityCredentials {
  string login = 1;
  string password = 2;
}

message EntityCreditCard {
  string number = 2;
  string name = 3;
  uint32 month = 4;
  uint32 year = 5;
  string code = 6;
}

message CreatedSecret {
  string id = 1;
}

message TextData {
  Metadata metadata = 1;
  string length = 2;
}

message Chunk {
  uint64 offset = 1;
  bytes data = 2;
}

message Entity {
  string id = 1;
  string name = 2;
  Kind kind = 3;
}

message EntityList {
  repeated Entity entity = 1;
}

message AuthToken {
  string jwt = 1;
  string userID = 2;
}

service AuthService {
  rpc Login(Credentials) returns(AuthToken);
  rpc Register(Credentials) returns(AuthToken);
}

service KeeperService {
  rpc GetAll(Empty) returns(EntityList);
  rpc CreateCredentials(CreateCreadentialsReq) returns(Entity);
  rpc CreateCreditCard(CreateCreditCardReq) returns(Entity);
  rpc CreateText(CreateTextReq) returns(Entity);
  rpc CreateBinary(CreateBinaryReq) returns(Entity);
  rpc SendData(stream Chunk) returns(Empty);
  rpc ReceiveData(Entity) returns(stream Chunk);
  rpc Ping(Empty) returns(Empty);
}